generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EFMigrationsHistory {
  MigrationId    String @id(map: "PK___EFMigrationsHistory") @db.VarChar(150)
  ProductVersion String @db.VarChar(32)

  @@map("__EFMigrationsHistory")
  @@ignore
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]
  orders Order[]

  @@map("user")
}

model Venue {
  id          String   @id @default(uuid())
  name        String   @unique
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  maxCapacity Int      @map("max_capacity")

  events Event[]

  @@map("venue")
}

model Event {
  id        String      @id @default(uuid())
  name      String
  slug      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  start     DateTime
  end       DateTime
  status    EventStatus @default(SUCCESS)

  venue       Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  venueId     String @map("venue_id")
  organizer   User   @relation(fields: [organizerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizerId String @map("organizer_id")

  orders Order[]

  @@map("event")
}

model Ticket {
  id String @id @default(uuid())

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId String @map("order_id")

  @@map("ticket")
}

model Order {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  noOfTickets Int         @map("no_of_tickets")
  status      OrderStatus

  tickets Ticket[]

  event         Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId       String @map("event_id")
  participant   User   @relation(fields: [participantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  participantId String @map("participant_id")

  @@map("schedule")
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
}

enum OrderStatus {
  SUCCESS
  CANCELLED_BY_PARTICIPANT
  CANCELLED_BY_ADMIN
  CANCELLED_BY_ORGANIZER
}

enum EventStatus {
  CANCELLED
  SUCCESS
}
